{"version":3,"sources":["js/task_3.js"],"names":["console","log","markupTask","document","querySelector","delay","ms","promise","Promise","resolve","reject","setTimeout","logger","time","insertAdjacentHTML","then","users","name","active","toggleUserState","allUsers","username","updatedUsers","map","user","all","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;AAmGA,aAnGA,QAAA,qBAGAA,QAAQC,IAAI,wBAAyB,iBACrC,MAAMC,EAAaC,SAASC,cAAc,gBAEpCC,EAAQC,IAIHC,OAHS,IAAIC,QAAQ,CAACC,EAASC,KAClCC,WAAW,KAAKF,EAAQH,IAAMA,MAKhCM,EAASC,IACXb,QAAQC,uBAAuBY,OAC/BX,EAAWY,mBAAmB,mCAAoCD,aAItER,EAAM,KAAMU,KAAKH,GACjBP,EAAM,KAAMU,KAAKH,GACjBP,EAAM,MAAMU,KAAKH,GAIjBP,EAAM,KAAMU,KAAK,KAAQb,EAAWY,mBAAmB,YAAc,qEACrEH,WAAW,KACPX,QAAQC,IAAI,wBAAyB,kBACtC,KAEH,MAAMe,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAGtBC,EAAkB,CAACC,EAAUC,KACzBC,MAAAA,EAAeF,EAASG,IAAIC,GAC9BA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAGtDhB,OAAAA,QAAQiB,IAAIH,IAQ3BX,WAAW,KACHQ,EAAgBH,EAAO,SAASD,KAAKf,QAAQ0B,QAClD,KACHf,WAAW,KACHQ,EAAgBH,EAAO,QAAQD,KAAKf,QAAQ0B,QACjD,KAIHrB,EAAM,KAAMU,KAAK,KAAQb,EAAWY,mBAAmB,YAAc,qEACrEH,WAAW,KACPX,QAAQC,IAAI,wBAAwB,kBACrC,KAEH,MAAM0B,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,GACd,IAAI1B,QAAQ,CAACC,EAASC,KACnBL,MAAAA,EAAQsB,EAA0B,IAAK,KAE/ChB,WAAW,KACUmB,KAAKE,SAAW,GAGjCvB,EAAQ,CAAE0B,GAAID,EAAYC,GAAItB,KAAMR,IAEpCK,EAAOwB,EAAYC,KAEpB9B,KAIH+B,EAAa,EAAGD,GAAAA,EAAItB,KAAAA,MACxBb,QAAQC,oBAAoBkC,kBAAmBtB,QAG3CwB,EAAWF,IACfnC,QAAQsC,sCAAsCH,+BAQhDxB,WAAW,KACHsB,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,IACrE,KACH1B,WAAW,KACHsB,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,IACrE","file":"task_3.df4bf4d8.js","sourceRoot":"../src","sourcesContent":["import '../sass/main.scss';\n\n// ------------------------------------------------------ Task 3.1 ------------------------------------------------------\nconsole.log('%c -----Task 3.1-----', 'color: tomato')\nconst markupTask = document.querySelector('.markup-task')\n\nconst delay = ms => {\n    const promise = new Promise((resolve, reject) => {\n        setTimeout(()=>{resolve(ms)}, ms)\n    });\n    return promise\n};\n\nconst logger = time => {\n    console.log(`Fulfilled after ${time}ms`);\n    markupTask.insertAdjacentHTML('beforeend', `<li>Fulfilled after ${time}ms</li>`)\n};\n\n// Tests\ndelay(2000).then(logger); // Fulfilled after 2000ms\ndelay(1000).then(logger); // Fulfilled after 1000ms\ndelay(1500).then(logger); // Fulfilled after 1500ms\n\n// ------------------------------------------------------ Task 3.2 ------------------------------------------------------\n\ndelay(3000).then(() => { markupTask.insertAdjacentHTML('beforeend', `<p class=\"task\">Task 3.2</p> <p>Please check Console --></p>`) });\nsetTimeout(() => {\n    console.log('%c -----Task 3.2-----', 'color: tomato')\n}, 3000)\n\nconst users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: false },\n];\n\nconst toggleUserState = (allUsers, username) => {\n    const updatedUsers = allUsers.map(user =>\n        user.name === username ? { ...user, active: !user.active } : user\n        );\n        \n        return Promise.all(updatedUsers)\n    };\n    \n    // Currently the function works like this\n    // toggleUserState(users, 'Mango', console.table);\n    // toggleUserState(users, 'Ajax', console.table);\n    \n    // The function should work like this\nsetTimeout(() => {\n        toggleUserState(users, 'Mango').then(console.table);\n}, 3000)\nsetTimeout(() => {\n        toggleUserState(users, 'Ajax').then(console.table);\n}, 4000)\n    \n// ------------------------------------------------------ Task 3.3 ------------------------------------------------------\n\ndelay(5000).then(() => { markupTask.insertAdjacentHTML('beforeend', `<p class=\"task\">Task 3.3</p> <p>Please check Console --></p>`) });\nsetTimeout(() => {\n    console.log('%c -----Task 3.3-----','color: tomato')\n}, 5000)\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n    return new Promise((resolve, reject) => {\n        const delay = randomIntegerFromInterval(200, 500);\n    \n      setTimeout(() => {\n        const canProcess = Math.random() > 0.3;\n    \n        if (canProcess) {\n          resolve({ id: transaction.id, time: delay });\n        } else {\n          reject(transaction.id);\n        }\n      }, delay);\n    })\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`✅Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`❌Error processing transaction ${id}. Please try again later.`);\n};\n\n// Currently the function works like this\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n\n// The function should work like this\nsetTimeout(() => {\n        makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n}, 5000)\nsetTimeout(() => {\n        makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n}, 6000)"]}